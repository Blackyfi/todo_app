// Mocks generated by Mockito 5.4.6 from annotations
// in todo_app/test/helpers/mock_repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/core/database/repository/category_repository.dart'
    as _i6;
import 'package:todo_app/core/database/repository/task_repository.dart' as _i3;
import 'package:todo_app/core/settings/models/auto_delete_settings.dart' as _i2;
import 'package:todo_app/core/settings/repository/auto_delete_settings_repository.dart'
    as _i8;
import 'package:todo_app/core/widgets/models/widget_config.dart' as _i10;
import 'package:todo_app/core/widgets/repository/widget_config_repository.dart'
    as _i9;
import 'package:todo_app/features/categories/models/category.dart' as _i7;
import 'package:todo_app/features/tasks/models/task.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDeleteSettings_0 extends _i1.SmartFake
    implements _i2.AutoDeleteSettings {
  _FakeAutoDeleteSettings_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> insertTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#insertTask, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i5.Task?> getTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTask, [id]),
            returnValue: _i4.Future<_i5.Task?>.value(),
          )
          as _i4.Future<_i5.Task?>);

  @override
  _i4.Future<List<_i5.Task>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTasksByCategory(int? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByCategory, [categoryId]),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTasksWithoutCategory() =>
      (super.noSuchMethod(
            Invocation.method(#getTasksWithoutCategory, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTasksByPriority(_i5.Priority? priority) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByPriority, [priority]),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTasksByCompletionStatus(bool? isCompleted) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByCompletionStatus, [isCompleted]),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTasksByDueDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByDueDate, [date]),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getUpcomingTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTodayTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getTodayTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<int> deleteCompletedTasksOlderThan(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCompletedTasksOlderThan, [duration]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> toggleTaskCompletion(int? taskId, bool? completed) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [taskId, completed]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i6.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> insertCategory(_i7.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#insertCategory, [category]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateCategory(_i7.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [category]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteCategory(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i7.Category?> getCategory(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCategory, [id]),
            returnValue: _i4.Future<_i7.Category?>.value(),
          )
          as _i4.Future<_i7.Category?>);

  @override
  _i4.Future<List<_i7.Category>> getAllCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCategories, []),
            returnValue: _i4.Future<List<_i7.Category>>.value(<_i7.Category>[]),
          )
          as _i4.Future<List<_i7.Category>>);
}

/// A class which mocks [AutoDeleteSettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutoDeleteSettingsRepository extends _i1.Mock
    implements _i8.AutoDeleteSettingsRepository {
  MockAutoDeleteSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AutoDeleteSettings> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: _i4.Future<_i2.AutoDeleteSettings>.value(
              _FakeAutoDeleteSettings_0(
                this,
                Invocation.method(#getSettings, []),
              ),
            ),
          )
          as _i4.Future<_i2.AutoDeleteSettings>);

  @override
  _i4.Future<int> insertSettings(_i2.AutoDeleteSettings? settings) =>
      (super.noSuchMethod(
            Invocation.method(#insertSettings, [settings]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateSettings(_i2.AutoDeleteSettings? settings) =>
      (super.noSuchMethod(
            Invocation.method(#updateSettings, [settings]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [WidgetConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWidgetConfigRepository extends _i1.Mock
    implements _i9.WidgetConfigRepository {
  MockWidgetConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> insertWidgetConfig(_i10.WidgetConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#insertWidgetConfig, [config]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateWidgetConfig(_i10.WidgetConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#updateWidgetConfig, [config]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteWidgetConfig(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWidgetConfig, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i10.WidgetConfig?> getWidgetConfig(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getWidgetConfig, [id]),
            returnValue: _i4.Future<_i10.WidgetConfig?>.value(),
          )
          as _i4.Future<_i10.WidgetConfig?>);

  @override
  _i4.Future<List<_i10.WidgetConfig>> getAllWidgetConfigs() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWidgetConfigs, []),
            returnValue: _i4.Future<List<_i10.WidgetConfig>>.value(
              <_i10.WidgetConfig>[],
            ),
          )
          as _i4.Future<List<_i10.WidgetConfig>>);
}
